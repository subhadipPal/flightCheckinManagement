{"version":3,"sources":["components/checkin/passengerInfo.jsx"],"names":["PassengerInfo","seatingCapacity","useState","updateInfo","setUpdateInfo","dispatch","useDispatch","seatRows","getSeatRows","availableSeats","forEach","row","seatCols","col","push","isAdminRole","useSelector","state","roles","selectedRole","ADMIN_ROLE_ID","currentBooking","flights","id","flightId","seat_no","passenger_name","checkedIn","wheel_chair_required","withInfant","passport_number","address","ancillary_services","formData","setFormData","className","variant","color","gutterBottom","size","value","onChange","e","target","disabled","select","autoComplete","multiple","label","helperText","map","seatNo","checked","labelId","event","input","renderValue","selected","sx","display","flexWrap","gap","ancServices","service","onClick","updateBooking","addNewPassenger","deleteBooking"],"mappings":"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","file":"static/js/9.8dcd4783.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions'\nimport CardContent from '@mui/material/CardContent'\nimport Button from '@mui/material/Button'\nimport Typography from '@mui/material/Typography'\nimport TextField from '@mui/material/TextField'\nimport Switch from '@mui/material/Switch'\nimport Select from '@mui/material/Select'\nimport Chip from '@mui/material/Chip'\nimport Box from '@mui/material/Box'\nimport OutlinedInput from '@mui/material/OutlinedInput'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\n\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  updateBooking,\n  addNewPassenger,\n  deleteBooking,\n} from '../../redux/actions'\nimport {\n  ancServices,\n  seatCols,\n  getSeatRows,\n  ADMIN_ROLE_ID,\n} from '../../constants'\nimport './passengerInfo.scss'\n\nfunction PassengerInfo({ seatingCapacity }) {\n  const [updateInfo, setUpdateInfo] = useState(false)\n  const dispatch = useDispatch()\n\n  const seatRows = getSeatRows(seatingCapacity)\n  const availableSeats = []\n  seatRows.forEach((row) =>\n    seatCols.forEach((col) => availableSeats.push(`${row}${col}`))\n  )\n\n  const currentRoleId = useSelector((state) => state.roles?.selectedRole)\n  const isAdminRole = currentRoleId === ADMIN_ROLE_ID\n\n  const currentBooking = useSelector((state) => state?.flights?.currentBooking)\n  const {\n    id,\n    flightId,\n    seat_no,\n    passenger_name,\n    checkedIn,\n    wheel_chair_required,\n    withInfant,\n    passport_number,\n    address,\n    ancillary_services,\n  } = currentBooking\n\n  const [formData, setFormData] = useState({\n    passenger_name,\n    flightId,\n    seat_no,\n    checkedIn,\n    wheel_chair_required,\n    withInfant,\n    passport_number,\n    address,\n    ancillary_services,\n  })\n\n  const handleUpdateBooking = () => {\n    setUpdateInfo(!updateInfo)\n\n    dispatch(updateBooking(formData, id, flightId))\n  }\n\n  const handleAncillaryServiceChange = (event) => {\n    const {\n      target: { value },\n    } = event\n\n    setFormData({ ...formData, ancillary_services: value })\n  }\n\n  const handleAddPassenger = () => dispatch(addNewPassenger(formData))\n\n  const handleDeleteBooking = () => dispatch(deleteBooking(id, flightId))\n\n  return currentBooking ? (\n    <Card className=\"info-card\">\n      <CardContent>\n        <Typography variant=\"h6\" color=\"text.primary\" gutterBottom>\n          Passenger information\n        </Typography>\n        <div className=\"info-grid\">\n          <span>Passenger name</span>\n          <TextField\n            size=\"small\"\n            variant=\"standard\"\n            value={formData.passenger_name}\n            onChange={(e) =>\n              setFormData({ ...formData, passenger_name: e.target.value })\n            }\n            disabled={isAdminRole ? id && !updateInfo : true}\n          />\n          <span>Passport number</span>\n          <TextField\n            size=\"small\"\n            variant=\"standard\"\n            value={formData.passport_number}\n            onChange={(e) =>\n              setFormData({ ...formData, passport_number: e.target.value })\n            }\n            disabled={isAdminRole ? id && !updateInfo : true}\n          />\n\n          <span>Address</span>\n          <TextField\n            size=\"small\"\n            variant=\"standard\"\n            value={formData.address}\n            onChange={(e) =>\n              setFormData({ ...formData, address: e.target.value })\n            }\n            disabled={isAdminRole ? id && !updateInfo : true}\n          />\n\n          <TextField\n            className=\"span-two-cols\"\n            select\n            autoComplete=\"on\"\n            multiple={false}\n            label=\"Seat number\"\n            value={formData.seat_no}\n            onChange={(e) =>\n              setFormData({ ...formData, seat_no: e.target.value })\n            }\n            helperText=\"Choose preferred seat\"\n            disabled={id && !updateInfo}\n          >\n            {availableSeats.map((seatNo) => (\n              <MenuItem key={seatNo} value={seatNo}>\n                {seatNo}\n              </MenuItem>\n            ))}\n          </TextField>\n\n          <span>Checked In </span>\n          <Switch\n            checked={formData.checkedIn}\n            onChange={(e) =>\n              setFormData({ ...formData, checkedIn: e.target.checked })\n            }\n            disabled={id && !updateInfo}\n          />\n\n          <span>Wheelchair required</span>\n          <Switch\n            checked={formData.wheel_chair_required}\n            onChange={(e) =>\n              setFormData({\n                ...formData,\n                wheel_chair_required: e.target.checked,\n              })\n            }\n            disabled={id && !updateInfo}\n          />\n\n          <span>With infant </span>\n          <Switch\n            checked={formData.withInfant}\n            onChange={(e) =>\n              setFormData({ ...formData, withInfant: e.target.checked })\n            }\n            disabled={id && !updateInfo}\n          />\n\n          <FormControl\n            className=\"span-two-cols\"\n            disabled={isAdminRole ? id && !updateInfo : true}\n          >\n            <InputLabel id=\"ancillary-service-label\">\n              Ancillary Services\n            </InputLabel>\n            <Select\n              labelId=\"ancillary-service-label\"\n              multiple\n              value={formData.ancillary_services}\n              onChange={handleAncillaryServiceChange}\n              input={<OutlinedInput label=\"Ancillary Services\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} />\n                  ))}\n                </Box>\n              )}\n            >\n              {ancServices.map((service) => (\n                <MenuItem key={service} value={service}>\n                  {service}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </CardContent>\n      <CardActions>\n        {!updateInfo && id && (\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={() => setUpdateInfo(!updateInfo)}\n          >\n            Update booking\n          </Button>\n        )}\n        {updateInfo && (\n          <Button variant=\"outlined\" size=\"small\" onClick={handleUpdateBooking}>\n            Save booking\n          </Button>\n        )}\n        {!id && (\n          <Button variant=\"outlined\" size=\"small\" onClick={handleAddPassenger}>\n            Add booking\n          </Button>\n        )}\n        {id && isAdminRole && (\n          <Button variant=\"outlined\" size=\"small\" onClick={handleDeleteBooking}>\n            Delete booking\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n      ) : (\n    <h6>{'No bookings found'}</h6>\n      )\n}\n\nexport default PassengerInfo\n"],"sourceRoot":""}